{"version":3,"sources":["Components/Square/Square.js","Components/Infobar/InfoBar.js","Components/PathFindingVisualiser.js","Algorithms.js","App.js","reportWebVitals.js","index.js"],"names":["Square","this","props","id","row","col","handleClickSquare","isInitial","isFinal","className","classNames","onClick","Component","InfoBar","rows","columns","PathFindingVisualiser","state","grid","initialX","initialY","finalX","finalY","status","initialiseGrid","bind","visualise","animateBFS","animatePath","screenSize","window","screen","availWidth","newGrid","currRow","push","isVisited","setState","alert","start","destination","path","visitedNodes","distance","que","prevNodes","directions","prevRow","foundDest","length","sz","i","curr","shift","j","newX","newY","currNode","reverse","getPath","bfs","setTimeout","document","getElementById","classList","add","location","reload","reset","map","box","currCol","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.124908fe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Square.css\";\r\nimport classNames from \"classnames\"\r\nclass Square extends Component {\r\n  render() {\r\n    const {id,row, col, handleClickSquare,isInitial,isFinal} = this.props;\r\n    return (\r\n      <div\r\n        id = {id}\r\n        className = {classNames(\"square border border-dark\",{\"initial-square\" : isInitial,\"final-square\": isFinal})}\r\n        onClick={() => handleClickSquare(row, col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from \"react\";\r\nimport \"./InfoBar.css\";\r\nexport class InfoBar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"info-bar\">\r\n          <div className=\"square border border-dark initial-square\"></div>\r\n          <span className=\"info-text\">Start</span>\r\n        </div>\r\n\r\n        <div className=\"info-bar\">\r\n          <div className=\"square border border-dark final-square\"></div>\r\n          <span className=\"info-text\">Destination</span>\r\n        </div>\r\n\r\n        <div className=\"info-bar\">\r\n          <div className=\"square border border-dark visited-square\"></div>\r\n          <span className=\"info-text\">Visited</span>\r\n        </div>\r\n\r\n        <div className=\"info-bar\">\r\n          <div className=\"square border border-dark path-square\"></div>\r\n          <span className=\"info-text\">Path</span>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InfoBar;\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./Square/Square\";\r\nimport { bfs } from \"../Algorithms\";\r\nimport \"../Components/Square/Square.css\";\r\nimport InfoBar from \"./Infobar/InfoBar\";\r\nlet rows = 28;\r\nlet columns = 55;\r\nclass PathFindingVisualiser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      initialX: null,\r\n      initialY: null,\r\n      finalX: null,\r\n      finalY: null,\r\n      status: \"\",\r\n    };\r\n    this.initialiseGrid = this.initialiseGrid.bind(this);\r\n    this.handleClickSquare = this.handleClickSquare.bind(this);\r\n    this.visualise = this.visualise.bind(this);\r\n    this.animateBFS = this.animateBFS.bind(this);\r\n    this.animatePath = this.animatePath.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    let screenSize = window.screen.availWidth;\r\n    if (screenSize < 1400 && screenSize >= 1000) {\r\n      rows = 20;\r\n      columns = 45;\r\n    } else if (screenSize < 1000 && screenSize >= 780) {\r\n      rows = 20;\r\n      columns = 35;\r\n    } else if (screenSize < 780 && screenSize > 500) {\r\n      rows = 20;\r\n      columns = 25;\r\n    } else if (screenSize < 500) {\r\n      rows = 13;\r\n      columns = 14;\r\n    }\r\n    this.initialiseGrid();\r\n  }\r\n  initialiseGrid() {\r\n    let newGrid = [];\r\n    for (let row = 0; row < rows; row++) {\r\n      let currRow = [];\r\n      for (let col = 0; col < columns; col++) {\r\n        currRow.push({\r\n          row,\r\n          col,\r\n          isInitial: false,\r\n          isFinal: false,\r\n          isVisited: false,\r\n        });\r\n      }\r\n      newGrid.push(currRow);\r\n    }\r\n    this.setState({\r\n      grid: newGrid,\r\n      initialX: null,\r\n      initialY: null,\r\n      finalX: null,\r\n      finalY: null,\r\n      status: \"Select the Source Node\",\r\n    });\r\n  }\r\n\r\n  handleClickSquare(row, col) {\r\n    let { grid } = this.state;\r\n    let { initialX, initialY, finalX, finalY, status } = this.state;\r\n    let newGrid = [...grid];\r\n    if (\r\n      initialX != null &&\r\n      initialY !== null &&\r\n      finalX !== null &&\r\n      finalY !== null\r\n    )\r\n      return;\r\n    else if (\r\n      initialX === null &&\r\n      initialY === null &&\r\n      finalX === null &&\r\n      finalY === null\r\n    ) {\r\n      initialX = row;\r\n      initialY = col;\r\n      newGrid[row][col].isInitial = true;\r\n      status = \"Select the Destination Node\";\r\n    } else if (\r\n      initialX !== null &&\r\n      initialY !== null &&\r\n      finalX === null &&\r\n      finalY === null\r\n    ) {\r\n      if (initialX === row && initialY === col) {\r\n        alert(\"intial and final points cannot be same\");\r\n        return;\r\n      } else {\r\n        finalX = row;\r\n        finalY = col;\r\n        newGrid[row][col].isFinal = true;\r\n        status = \"Ready to Visualise\";\r\n      }\r\n    }\r\n    this.setState({\r\n      initialX,\r\n      initialY,\r\n      finalX,\r\n      finalY,\r\n      grid: newGrid,\r\n      status,\r\n    });\r\n  }\r\n  visualise() {\r\n    let { initialX, initialY, finalX, finalY, grid } = this.state;\r\n    let { animateBFS, animatePath } = this;\r\n    if (initialX === null && finalX === null) {\r\n      alert(\"Please specify initial and final points\");\r\n      return;\r\n    } else if (initialX !== null && finalX === null) {\r\n      alert(\"Please specify the final point\");\r\n      return;\r\n    }\r\n    let { path, visitedNodes, distance } = bfs(\r\n      grid[initialX][initialY],\r\n      grid[finalX][finalY],\r\n      grid,\r\n      rows,\r\n      columns\r\n    );\r\n    animateBFS(visitedNodes);\r\n    setTimeout(() => {\r\n      animatePath(path);\r\n      this.setState({\r\n        distance,\r\n        status: `Shortest distance found is ${distance}`,\r\n      });\r\n    }, visitedNodes.length * 25);\r\n  }\r\n\r\n  animateBFS(visitedNodes) {\r\n    for (let i = 1; i < visitedNodes.length; i++) {\r\n      setTimeout(() => {\r\n        let currNode = visitedNodes[i];\r\n        document\r\n          .getElementById(`square-${currNode.row}-${currNode.col}`)\r\n          .classList.add(\"visited-square\");\r\n      }, i * 25);\r\n    }\r\n  }\r\n\r\n  animatePath(path) {\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let currNode = path[i];\r\n        document\r\n          .getElementById(`square-${currNode.row}-${currNode.col}`)\r\n          .classList.add(\"path-square\");\r\n      }, i * 25);\r\n    }\r\n  }\r\n  reset() {\r\n    window.location.reload();\r\n  }\r\n\r\n  render() {\r\n    let { grid, status } = this.state;\r\n    const { handleClickSquare, visualise, reset } = this;\r\n    return (\r\n      <div className=\"container mt-2\">\r\n        <div className=\"container\">\r\n          <h1>Path Finding Visualiser</h1>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6 text-center mt-3\">\r\n              <InfoBar />\r\n            </div>\r\n            <div className=\"col-md-4 text-center mt-3\">\r\n              <span className=\"bg-dark text-white font-weight-light font-italic p-2 m-1\">\r\n                {status}\r\n              </span>\r\n            </div>\r\n            <div className=\"col-md-1\">\r\n              <button\r\n                className=\"btn btn-warning mt-3 mb-1\"\r\n                onClick={() => visualise()}\r\n              >\r\n                Visualise\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-1\">\r\n              <button className=\"btn btn-primary mt-3 mb-1\" onClick={() => reset()}>\r\n                Reset\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"container mt-2\">\r\n          {grid.map((row, currRow) => {\r\n            return (\r\n              <div className=\"row\" key={currRow}>\r\n                {row.map((box, currCol) => {\r\n                  return (\r\n                    <Square\r\n                      key={`square-${currRow}-${currCol}`}\r\n                      id={`square-${currRow}-${currCol}`}\r\n                      handleClickSquare={handleClickSquare}\r\n                      {...grid[currRow][currCol]}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathFindingVisualiser;\r\n","export function bfs(start,destination,grid,rows,columns){\r\n    if(start.isVisited) {\r\n        return {\r\n            path : [],\r\n            visitedNodes : [],\r\n            distance : []\r\n        }\r\n    }\r\n    let que = []\r\n    let visitedNodes = []\r\n    let prevNodes = []\r\n\r\n    let directions = [\r\n        [0, 1],\r\n        [1, 0],\r\n        [0, -1],\r\n        [-1, 0],\r\n      ];\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n        let prevRow = [];\r\n        for (let col = 0; col < columns; col++) {\r\n          prevRow.push(null);\r\n        }\r\n        prevNodes.push(prevRow);\r\n    }\r\n\r\n    let distance = 0;\r\n    let foundDest = false;\r\n    que.push(start);\r\n    grid[start.row][start.col].isVisited = true;\r\n    while (que.length && !foundDest) {\r\n      let sz = que.length;\r\n      for (let i = 0; i < sz; i++) {\r\n        let curr = que.shift();\r\n        visitedNodes.push(curr);\r\n        for (let j = 0; j < directions.length; j++) {\r\n          let newX = curr.row + directions[j][0];\r\n          let newY = curr.col + directions[j][1];\r\n          if (\r\n            newX >= 0 &&\r\n            newY >= 0 &&\r\n            newX < rows &&\r\n            newY < columns &&\r\n            !grid[newX][newY].isVisited \r\n          ) {\r\n            if(grid[newX][newY] === destination){\r\n                 prevNodes[newX][newY] = curr;\r\n                 foundDest = true;\r\n                 break;\r\n            }\r\n            que.push(grid[newX][newY]);\r\n            grid[newX][newY].isVisited = true;\r\n            prevNodes[newX][newY] = curr;\r\n          }\r\n        }\r\n      }\r\n      distance++;\r\n      if(foundDest) break;\r\n    }\r\n    let path = getPath(grid,prevNodes,destination)\r\n    return {\r\n        path,visitedNodes,distance\r\n    }\r\n  };\r\n\r\nfunction getPath(grid,prevNodes,destination){\r\n      let path = []; \r\n      let currNode = destination\r\n      while(currNode !== null){\r\n           path.push(currNode);\r\n           currNode = prevNodes[currNode.row][currNode.col]\r\n      }\r\n      path.reverse()\r\n      return path\r\n  };","import './App.css';\nimport PathFindingVisualiser from './Components/PathFindingVisualiser';\n\nfunction App() {\n  return (\n    <div>\n       <PathFindingVisualiser />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}